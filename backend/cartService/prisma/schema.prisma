generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model addresses {
  id             Int     @id @default(autoincrement())
  user_id        Int?
  address        String? @db.MediumText
  receiver_name  String? @db.VarChar(255)
  receiver_phone String? @db.VarChar(20)
  users          users?  @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "addresses_ibfk_1")

  @@index([user_id], map: "user_id")
}

model book_images {
  id      Int     @id @default(autoincrement())
  book_id Int?
  url     String? @db.VarChar(255)
  books   books?  @relation(fields: [book_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "book_images_ibfk_1")

  @@index([book_id], map: "book_id")
}

model books {
  id              Int           @id @default(autoincrement())
  title           String        @db.VarChar(255)
  author          String?       @db.VarChar(255)
  description     String?       @db.MediumText
  price           Decimal?      @db.Decimal(10, 2)
  import_price    Decimal?      @db.Decimal(10, 2)
  stock           Int?
  discount_id     Int
  sold            Int?
  status          Int?          @db.TinyInt
  is_featured     Boolean?
  is_new          Boolean?
  pages           Int?
  publish_year    Int?
  weight          Decimal?      @db.Decimal(10, 2)
  size            String?       @db.VarChar(50)
  category_id     Int?
  publisher_id    Int?
  sale_start_date DateTime      @default(now()) @db.Timestamp(0)
  book_images     book_images[]
  discounts       discounts     @relation(fields: [discount_id], references: [id], onUpdate: Restrict, map: "books_ibfk_3")
  publishers      publishers?   @relation(fields: [publisher_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "books_ibfk_2")
  categories      categories?   @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "books_ibfk_1")
  cart_items      cart_items[]
  order_items     order_items[]
  reviews         reviews[]

  @@index([category_id], map: "category_id")
  @@index([publisher_id], map: "publisher_id")
  @@index([discount_id], map: "discount_id")
}

model categories {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  slug        String  @db.VarChar(255)
  description String? @db.MediumText
  books       books[]
}

model discounts {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  code       String?  @db.VarChar(50)
  percent    Decimal? @db.Decimal(5, 2)
  start_date DateTime @default(now()) @db.Timestamp(0)
  end_date   DateTime @default(dbgenerated("('0000-00-00 00:00:00')")) @db.Timestamp(0)
  books      books[]
}

model publishers {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  slug        String  @db.VarChar(255)
  description String? @db.MediumText
  address     String? @db.MediumText
  image       String? @db.VarChar(255)
  books       books[]
}

model reviews {
  id      Int     @id @default(autoincrement())
  book_id Int?
  user_id Int?
  rating  Int?
  comment String? @db.MediumText
  books   books?  @relation(fields: [book_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "reviews_ibfk_1")
  users   users?  @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "reviews_ibfk_2")

  @@index([book_id], map: "book_id")
  @@index([user_id], map: "user_id")
}

model users {
  id         Int          @id @default(autoincrement())
  username   String       @db.VarChar(255)
  password   String       @db.VarChar(255)
  name       String?      @db.VarChar(255)
  email      String?      @db.VarChar(255)
  avatar     String?      @db.VarChar(255)
  status     Int?         @db.TinyInt
  addresses  addresses[]
  cart_items cart_items[]
  orders     orders[]
  reviews    reviews[]
}

model cart_items {
  id         Int      @id @default(autoincrement())
  user_id    Int
  book_id    Int
  quantity   Int      @default(1)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  books      books    @relation(fields: [book_id], references: [id], onUpdate: Restrict, map: "cart_items_book_fk")
  users      users    @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "cart_items_user_fk")

  @@index([book_id], map: "book_id")
  @@index([user_id], map: "user_id")
}

model order_items {
  id         Int      @id @default(autoincrement())
  order_id   Int
  book_id    Int
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)
  created_at DateTime @default(now()) @db.Timestamp(0)
  books      books    @relation(fields: [book_id], references: [id], onUpdate: Restrict, map: "order_items_book_fk")
  orders     orders   @relation(fields: [order_id], references: [id], onUpdate: Restrict, map: "order_items_order_fk")

  @@index([book_id], map: "book_id")
  @@index([order_id], map: "order_id")
}

model orders {
  id             Int           @id @default(autoincrement())
  user_id        Int
  total          Decimal       @db.Decimal(10, 2)
  address        String        @db.MediumText
  status         orders_status @default(pending)
  payment_method String        @db.VarChar(50)
  created_at     DateTime      @default(now()) @db.Timestamp(0)
  updated_at     DateTime      @default(now()) @db.Timestamp(0)
  order_items    order_items[]
  users          users         @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "orders_user_fk")

  @@index([user_id], map: "user_id")
}

enum orders_status {
  pending
  processing
  shipped
  delivered
  cancelled
}
